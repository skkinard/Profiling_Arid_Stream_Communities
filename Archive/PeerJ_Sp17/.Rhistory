summary(regression)$fstatistic[3],
lower.tail=FALSE)
}
table.lm
# Load Packages
library(nlme)
library(multcomp)
library(vegan)
library(cluster)
library("car")
library("MuMIn")
library("readr")
library(xlsx)
library(pvclust)
# Set Work Directory
setwd("C:\\Users\\Sean\\Desktop\\Dropbox\\Research\\Manuscipts\\Diss.2_Gradient\\Sp.17.Stats")
# Source stat programs
source('sp17_r_source_files/augPairs.R', encoding = 'UTF-8')
source('sp17_r_source_files/correctedLMEAnova.R', encoding = 'UTF-8')
source('sp17_r_source_files/diagPlotsWithoutLMTest.R', encoding = 'UTF-8')
source('sp17_r_source_files/multcompUtilities.R', encoding = 'UTF-8')
source('sp17_r_source_files/profilePlot.R', encoding = 'UTF-8')
source('sp17_r_source_files/traditionalForwardBackward_lm.R', encoding = 'UTF-8')
# Import Data Files
emat <- read.csv("sp17_data_files\\sp17_site_x_env_revised.csv", fileEncoding="UTF-8-BOM")
imat <- read.csv("sp17_data_files\\sp17_site_x_invert.csv", fileEncoding="UTF-8-BOM")
# Merge Community x site with env x site
msterinvert <- merge(imat,emat, by = "STAID")
row.names(msterinvert) <- msterinvert$staid
msterinvert <- Filter(is.numeric, msterinvert)
# :::::::::::::::::::::::::::::::::::::::::::::::::::::
# Multivariate Regression analysis
# Invertebrate
# PCA selected environmental variables
# scale environmental predictors
msterinvert[,101:124] <- scale(msterinvert[,101:124])
full.model.invertebrate <- lm(shannon~ AP + flash.index + LFPP + NH4. + log.cond + canopy + Rosgen.Index, data=msterinvert)
summary(full.model.invertebrate)
vif(full.model.invertebrate)
# Exhuastive multivariable regression
options(na.action = "na.fail")
dredge(full.model.invertebrate)
options(na.action = "na.omit")
# exported top ten model outputs and AICc to excel sheet
# models ranked 1st through 9th contain 0-1 predictor variables.
# The tenth AICc ranked model contains 2 variables:
im1 <- lm(shannon~ LFPP + NH4., data=msterinvert)
im2 <- lm(shannon~ canopy + LFPP, data=msterinvert)
im3 <- lm(shannon ~ AP + LFPP, data = msterinvert)
model_name <- c("im1", "im2", "im3")
d <- list(summary(im1), summary(im2), summary(im3))
# make data frame for model outputs
model_name
var1 <- rep(0, length(d))
var2 <- rep(0, length(d))
estimate <- rep(0,length(d))
estimate2 <- rep(0,length(d))
adjusted_r2 <- rep(0,length(d))
f.stat <- rep(0,length(d))
df <- rep(0,length(d))
p.value <- rep(0,length(d))
table.lm <- data.frame(model_name, var1, estimate,var2, estimate2, adjusted_r2, f.stat, df, p.value)
for(j in 1:length(d)){
table.lm$var1[j] <- noquote(rownames(d[[j]]$coefficients)[2])
table.lm$var2[j] <- noquote(rownames(d[[j]]$coefficients)[3])
table.lm$estimate[j] <- d[[j]]$coefficients[2,1]
table.lm$estimate2[j] <- d[[j]]$coefficients[3,1]
table.lm$df[j] <- paste(d[[j]]$df[1], d[j]$df[2])
table.lm$adjusted_r2[j] <- d[[j]]$adj.r.squared
table.lm$f.stat[j] <- d[[j]]$fstatistic[1]
table.lm$p.value[j] <- d[[j]]$coefficients[2,4]
table.lm$p.value[j] <- pf(d[[j]]$fstatistic[1],
d[[j]]$fstatistic[2],
d[[j]]$fstatistic[3],
lower.tail=FALSE)
}
table.lm
dredge(full.model.invertebrate)
# Exhuastive multivariable regression
options(na.action = "na.fail")
dredge(full.model.invertebrate)
# Load Packages
library(nlme)
library(multcomp)
library(vegan)
library(cluster)
library("car")
library("MuMIn")
library("readr")
library(xlsx)
library(pvclust)
# Set Work Directory
setwd("C:\\Users\\Sean\\Desktop\\Dropbox\\Research\\Manuscipts\\Diss.2_Gradient\\Sp.17.Stats")
# Source stat programs
source('sp17_r_source_files/augPairs.R', encoding = 'UTF-8')
source('sp17_r_source_files/correctedLMEAnova.R', encoding = 'UTF-8')
source('sp17_r_source_files/diagPlotsWithoutLMTest.R', encoding = 'UTF-8')
source('sp17_r_source_files/multcompUtilities.R', encoding = 'UTF-8')
source('sp17_r_source_files/profilePlot.R', encoding = 'UTF-8')
source('sp17_r_source_files/traditionalForwardBackward_lm.R', encoding = 'UTF-8')
# Import Data Files
emat <- read.csv("sp17_data_files\\sp17_site_x_env_revised.csv", fileEncoding="UTF-8-BOM")
imat <- read.csv("sp17_data_files\\sp17_site_x_invert.csv", fileEncoding="UTF-8-BOM")
# Merge Community x site with env x site
msterinvert <- merge(imat,emat, by = "STAID")
row.names(msterinvert) <- msterinvert$staid
msterinvert <- Filter(is.numeric, msterinvert)
# :::::::::::::::::::::::::::::::::::::::::::::::::::::
# Multivariate Regression analysis
# Invertebrate
# PCA selected environmental variables
# scale environmental predictors
msterinvert[,101:124] <- scale(msterinvert[,101:124])
full.model.invertebrate <- lm(shannon~ AP + flash.index + LFPP + NH4. + log.cond + canopy + Rosgen.Index, data=msterinvert)
summary(full.model.invertebrate)
vif(full.model.invertebrate)
# Exhuastive multivariable regression
options(na.action = "na.fail")
dredge(full.model.invertebrate)
options(na.action = "na.omit")
library(BiodiversityR) # also loads vegan
library(ggplot2)
library(RColorBrewer)
library(readxl)
library(ggsci)
library(ggrepel)
library(ggforce)
library(ade4)
library(adegraphics)
library(adespatial)
library(cocorresp)
library(vegan)
library(vegan3d)
library(ape)   # For PCoA with Lingoes correction (not in the book)
library(MASS)
library(ellipse)
library(FactoMineR)
library(rrcov)
library(tidyverse)
# Source additional functions that will be used later in this
# Chapter. Our scripts assume that files to be read are in
# the working directory.
source("sp17_r_source_files\\hcoplot.R")
source("sp17_r_source_files\\triplot.rda.R")
source("sp17_r_source_files\\plot.lda.R")
source("sp17_r_source_files\\polyvars.R")
source("sp17_r_source_files\\screestick.R")
setwd("C:\\Users\\s2kin\\Dropbox\\Research\\Manuscipts\\Diss.2_Gradient\\PeerJ_Sp17\\")
env <- read.csv("sp17_data_files/sp17_site_x_env_revised.csv")
invert <- read.csv("sp17_data_files/sp17_site_x_invert.csv")
# cleaning up data frames to include only the a priori selected variables and community abundance matrix
env <- env[,c(which(  colnames(env) == "STAID" |
colnames(env) == "AP" |
colnames(env) == "log.cond" |
colnames(env) == "Rosgen.Index" |
colnames(env) == "canopy"|
colnames(env) == "NH4."|
colnames(env) == "flash.index"|
colnames(env) == "LFPP"
))]
invert <- invert[,-c(which(colnames(invert) == "shannon" |
colnames(invert) == "rare.rich" |
colnames(invert) == "rich" |
colnames(invert) == "site.code"))]
msterinvert <- merge(env,invert, by = "STAID")
# # # # # # # # # # # # # # #
# Redundancy Analysis (RDA) #
# # # # # # # # # # # # # # #
# step 1: The ordiplot object is obtained from the result of via function rda. The ordination is done with a community data set that is transformed by the Hellinger method as recommended in this article.
# script generated by the BiodiversityR GUI from the constrained ordination menu
invert.Hellinger <- disttransform(msterinvert[,9:103], method='hellinger')
Ordination.model2 <- rda(invert.Hellinger ~ AP,data=msterinvert, scaling="species")
summary(Ordination.model2)
# This can be plotted via ordiplot
plot2 <- ordiplot(Ordination.model2, choices=c(1,2))
# Step 2 : To plot data via ggplot2
# information on the locations of sites (circles in the ordiplot) is obtained via function sites.long.
sites.long2 <- sites.long(plot2, env.data=msterinvert[,2:8])
head(sites.long2)
# Information on species is extracted by function species.long.
species.long2 <- species.long(plot2)
species.long2
# Information on the labeling of the axes is obtained with function axis.long. This information is extracted from the ordination model and not the ordiplot, hence it is important to select the same axes via argument 'choices'. The extracted information includes information on the percentage of explained variation. I suggest that you cross-check with the summary of the redundancy analysis, where information on proportion explained is given.
axis.long2 <- axis.long(Ordination.model2, choices=c(1, 2))
axis.long2
# Step 3: Generate plot adding information on sites and species similar to the ordiplot:
plot_irda <- ggplot() +
geom_vline(xintercept = c(0), color = "grey70", linetype = 2) +
geom_hline(yintercept = c(0), color = "grey70", linetype = 2) +
xlab(axis.long2[1, "label"]) +
ylab(axis.long2[2, "label"]) +
scale_x_continuous(sec.axis = dup_axis(labels=NULL, name=NULL)) +
scale_y_continuous(sec.axis = dup_axis(labels=NULL, name=NULL)) +
geom_point(data=sites.long2,
aes(x=axis1, y=axis2, colour=AP),
size=6) +
geom_point(data=species.long2,
aes(x=axis1, y=axis2)) +
scale_colour_viridis_c(direction=-1) +
coord_fixed(ratio=1) +
theme_classic() +
theme(legend.position="none") +
theme(text = element_text(size = 16)) +
theme(axis.text = element_text(size = 16)) +
theme(axis.title = element_text(size = 20))
plot_irda
# With an ordination via redundancy analysis, the positions of species should be interpreted as arrows. It is straightforward to show the positions of the species as arrows. However, with a large number of species, it is better to reduce the number to those that explain more of the variation among the sites. This information is obtained with the envfit function of vegan.
spec.envfit <- envfit(plot2, env=invert.Hellinger)
spec.data.envfit <- data.frame(r=spec.envfit$vectors$r, p=spec.envfit$vectors$pvals)
species.long2 <- species.long(plot2, spec.data=spec.data.envfit)
species.long2
# Species are selected that have a statistically significant p-value
species.long3 <- species.long2[species.long2$p <= 0.05, ]
species.long3
# Now the information of the selected species can be added to the ordination diagram.
# species vectors plot
plot_irda_spec <- ggplot() +
geom_vline(xintercept = c(0), color = "grey70", linetype = 2) +
geom_hline(yintercept = c(0), color = "grey70", linetype = 2) +
xlab(axis.long2[1, "label"]) +
ylab(axis.long2[2, "label"]) +
scale_x_continuous(sec.axis = dup_axis(labels=NULL, name=NULL)) +
scale_y_continuous(sec.axis = dup_axis(labels=NULL, name=NULL)) +
geom_segment(data=species.long3,
aes(x=0, y=0, xend=axis1*2.7, yend=axis2*2.7),
colour="black", size=1.2, arrow=arrow()) +
geom_label_repel(data=species.long3,
aes(x=axis1*2.7, y=axis2*2.7, label=labels),
box.padding = 1)  +
geom_point(data=sites.long2, alpha = 0.8,
aes(x=axis1, y=axis2, colour=AP),
size=5, show.legend = FALSE) +
scale_colour_viridis_c(direction=-1) +
coord_fixed(ratio=1) +
theme_classic() +
theme(legend.position="none") +
theme(text = element_text(size = 16)) +
theme(axis.text = element_text(size = 16)) +
theme(axis.title = element_text(size = 18))
plot_irda_spec
# which gives the following ordination diagram (length of vectors were multiplied, which does not change their interpretation)
# species vectors without labels
plot_irda_spec_nolabel <- ggplot() +
geom_vline(xintercept = c(0), color = "grey70", linetype = 2) +
geom_hline(yintercept = c(0), color = "grey70", linetype = 2) +
xlab(axis.long2[1, "label"]) +
ylab(axis.long2[2, "label"]) +
scale_x_continuous(sec.axis = dup_axis(labels=NULL, name=NULL)) +
scale_y_continuous(sec.axis = dup_axis(labels=NULL, name=NULL)) +
geom_point(data=sites.long2,
aes(x=axis1, y=axis2, colour=AP),
size=5) +
scale_colour_viridis_c(direction=-1) +
coord_fixed(ratio=1) +
theme_classic() +
theme(legend.position="none") +
theme(text = element_text(size = 16)) +
theme(axis.text = element_text(size = 16)) +
theme(axis.title = element_text(size = 20))
plot_irda_spec_nolabel
# adding environmental fit vectors
vectors.envfit <- envfit(plot2, env=msterinvert[,2:8])
vectors.long2 <- vectorfit.long(vectors.envfit)
vectors.long2
# Only Predictors are selected that have a statistically significant p-value
vectors.long3 <- vectors.long2[vectors.long2$p <= 0.05, ]
vectors.long3
# Environmental Vectors Plot
plot_irda_env <- ggplot() +
geom_vline(xintercept = c(0), color = "grey70", linetype = 2) +
geom_hline(yintercept = c(0), color = "grey70", linetype = 2) +
xlab(axis.long2[1, "label"]) +
ylab(axis.long2[2, "label"]) +
scale_x_continuous(sec.axis = dup_axis(labels=NULL, name=NULL)) +
scale_y_continuous(sec.axis = dup_axis(labels=NULL, name=NULL)) +
geom_segment(data=vectors.long2,
aes(x=0,
y=0,
xend=axis1*.7,
yend=axis2*.7),
colour="gray",
size=1.2,
arrow=arrow()) +
geom_segment(data=vectors.long3,
aes(x=0,
y=0,
xend=axis1*.7,
yend=axis2*.7),
colour="black",
size=1.2,
arrow=arrow()) +
geom_label_repel(data=vectors.long2,
aes(x=axis1*.5, y=axis2*.5, label=rownames(vectors.long2)),
colour="black", box.padding = 0.7
) +
geom_point(data=sites.long2, alpha = 0.8,
aes(x=axis1, y=axis2, colour=AP),
size=5, show.legend = FALSE) +
scale_colour_viridis_c(direction=-1) +
coord_fixed(ratio=1) +
theme_classic() +
theme(legend.position="none") +
theme(text = element_text(size = 16)) +
theme(axis.text = element_text(size = 16)) +
theme(axis.title = element_text(size = 20))
plot_irda_env
# which gives the following ordination diagram (length of vectors were multiplied, which does not change their interpretation)
# environmental vectors (black = p <.05, gray = ns)
# environmental vectors without labels
plot_irda_env_nolabel <- ggplot() +
geom_vline(xintercept = c(0), color = "grey70", linetype = 2) +
geom_hline(yintercept = c(0), color = "grey70", linetype = 2) +
xlab(axis.long2[1, "label"]) +
ylab(axis.long2[2, "label"]) +
scale_x_continuous(sec.axis = dup_axis(labels=NULL, name=NULL)) +
scale_y_continuous(sec.axis = dup_axis(labels=NULL, name=NULL)) +
geom_point(data=sites.long2,
aes(x=axis1, y=axis2, colour=AP),
size=5) +
scale_colour_viridis_c(direction=-1) +
coord_fixed(ratio=1) +
theme_classic() +
theme(legend.position="none") +
theme(text = element_text(size = 16)) +
theme(axis.text = element_text(size = 16)) +
theme(axis.title = element_text(size = 20))
plot_irda_env_nolabel
# - # - # - # - # - # - # - # - # - # - # - # - # # - # - # - # - #
# RDA: all environmental variables
spe.hel <- disttransform(spe, method='hellinger')
(spe.rda <- rda(spe.hel ~ ., env))
vif.cca(spe.rda) # Variance inflation factors (VIF) in two RDAs
#  VIF > 10: AP, (log.cond = 9.434182)
#     RDA with all explanatory variables
spe.rda.all <- rda(spe.hel ~ ., data = env)
# Global adjusted R^2
(R2a.all <- RsquareAdj(spe.rda.all)$adj.r.squared)
# Forward selection using vegan's ordistep()
# This function allows the use of factors.
mod0 <- rda(spe.hel ~ 1, data = env)
step.forward <-
ordistep(mod0,
scope = formula(spe.rda.all),
direction = "forward",
permutations = how(nperm = 499) # Step: spe.hel ~ log.cond
)
RsquareAdj(step.forward)
## Variation partitioning with two sets of explanatory variables
# Explanation of fraction labels (two, three and four explanatory
# matrices) with optional colours
# Forwar and backward models indicate substantial model environmental predictors include AP and NH4.
par(mfrow = c(1, 3), mar = c(1, 1, 1, 1))
showvarparts(2, bg = c("red", "blue"))
showvarparts(3, bg = c("red", "blue", "yellow"))
showvarparts(4, bg = c("red", "blue", "yellow", "green"))
## 1. Variation partitioning AP, LFPP, residuals
(spe.part.all <- varpart(spe.hel, env$log.cond, env$AP))
# Plot of the partitioning results
par(mfrow = c(1, 1))
plot(spe.part.all, digits = 2, bg = c("red", "blue", "yellow"))
# - # - # - # - # - # - # - # - # - # - # - # - # # - # - # - # - #
library(nlme)
library(multcomp)
library(vegan)
library(cluster)
library("car")
library("MuMIn")
library("readr")
library(xlsx)
library(pvclust)
# Set Work Directory
setwd("C:\\Users\\Sean\\Desktop\\Dropbox\\Research\\Manuscipts\\Diss.2_Gradient\\Sp.17.Stats")
# Source stat programs
source('sp17_r_source_files/augPairs.R', encoding = 'UTF-8')
source('sp17_r_source_files/correctedLMEAnova.R', encoding = 'UTF-8')
source('sp17_r_source_files/diagPlotsWithoutLMTest.R', encoding = 'UTF-8')
source('sp17_r_source_files/multcompUtilities.R', encoding = 'UTF-8')
source('sp17_r_source_files/profilePlot.R', encoding = 'UTF-8')
source('sp17_r_source_files/traditionalForwardBackward_lm.R', encoding = 'UTF-8')
# Import Data Files
fmat <- read.csv("sp17_data_files\\sp17_site_x_fish.csv")
emat <- read.csv("sp17_data_files\\sp17_site_x_env_revised.csv", fileEncoding="UTF-8-BOM")
imat <- read.csv("sp17_data_files\\sp17_site_x_invert.csv", fileEncoding="UTF-8-BOM")
# Merge Community x site with env x site
msterfish <- merge(fmat, emat, by = "STAID")
row.names(msterfish) <- msterfish$staid
msterfish <- Filter(is.numeric, msterfish)
msterinvert <- merge(imat,emat, by = "STAID")
row.names(msterinvert) <- msterinvert$staid
msterfish <- Filter(is.numeric, msterfish)
# :::::::::::::::::::::::::::::::::::::::::::::::::::::
# Multivariate Regression analysis
# Fish
# a priori selected environmental variables
# scale environmental predictors
msterfish[,12:45] <- scale(msterfish[,12:45])
full.model.fish <- lm(shannon~ AP + flash.index + LFPP + NH4. + log.cond + canopy + Rosgen.Index , data=msterfish)
summary(full.model.fish)
# Coefficients:
#   Estimate Std. Error t value Pr(>|t|)
# (Intercept)   1.261048   0.101568  12.416  0.00642 **
#   AP            0.392638   0.402968   0.974  0.43264
# flash.index   0.006972   0.218168   0.032  0.97741
# LFPP         -0.262315   0.217824  -1.204  0.35167
# NH4.          0.060313   0.271008   0.223  0.84455
# log.cond      0.116788   0.328844   0.355  0.75643
# canopy       -0.052908   0.233836  -0.226  0.84202
# Rosgen.Index  0.094603   0.141608   0.668  0.57287
# ---
# Residual standard error: 0.3212 on 2 degrees of freedom
# Multiple R-squared:  0.8848,	Adjusted R-squared:  0.4818
# F-statistic: 2.195 on 7 and 2 DF,  p-value: 0.3483
vif(full.model.fish) # Indicates low variance inflation due to colinearities among environmental predictors
# Exhuastive multivariable regression
options(na.action = "na.fail")
ms1 <- dredge(full.model.fish)
options(na.action = "na.omit")
ms1
# Load Packages
library(nlme)
library(multcomp)
library(vegan)
library(cluster)
library("car")
library("MuMIn")
library("readr")
library(xlsx)
library(pvclust)
# Set Work Directory
setwd("C:\\Users\\Sean\\Desktop\\Dropbox\\Research\\Manuscipts\\Diss.2_Gradient\\Sp.17.Stats")
# Source stat programs
source('sp17_r_source_files/augPairs.R', encoding = 'UTF-8')
source('sp17_r_source_files/correctedLMEAnova.R', encoding = 'UTF-8')
source('sp17_r_source_files/diagPlotsWithoutLMTest.R', encoding = 'UTF-8')
source('sp17_r_source_files/multcompUtilities.R', encoding = 'UTF-8')
source('sp17_r_source_files/profilePlot.R', encoding = 'UTF-8')
source('sp17_r_source_files/traditionalForwardBackward_lm.R', encoding = 'UTF-8')
# Import Data Files
emat <- read.csv("sp17_data_files\\sp17_site_x_env_revised.csv", fileEncoding="UTF-8-BOM")
imat <- read.csv("sp17_data_files\\sp17_site_x_invert.csv", fileEncoding="UTF-8-BOM")
# Merge Community x site with env x site
msterinvert <- merge(imat,emat, by = "STAID")
row.names(msterinvert) <- msterinvert$staid
msterinvert <- Filter(is.numeric, msterinvert)
# :::::::::::::::::::::::::::::::::::::::::::::::::::::
# Multivariate Regression analysis
# Invertebrate
# PCA selected environmental variables
# scale environmental predictors
msterinvert[,101:124] <- scale(msterinvert[,101:124])
full.model.invertebrate <- lm(shannon~ AP + flash.index + LFPP + NH4. + log.cond + canopy + Rosgen.Index, data=msterinvert)
summary(full.model.invertebrate)
vif(full.model.invertebrate)
# Exhuastive multivariable regression
options(na.action = "na.fail")
dredge(full.model.invertebrate)
options(na.action = "na.omit")
# Sean Kinard
# 12-17-2020
# PCA to identify patterns in variation among environmental variables
# Load and Install Packages
library(ggplot2)
library(devtools)
install_github("vqv/ggbiplot")
library(ggbiplot)
library(writexl)
# Set Working Directory
setwd("C:/Users/s2kin/Dropbox/Research/Manuscipts/Diss.2_Gradient/PeerJ_Sp17")
# Import Data File
emat <- read.csv("sp17_data_files\\sp17_site_x_env_revised.csv", fileEncoding="UTF-8-BOM")
# Selecting a-priori selected variables
# 7 variables to evaluate with community diversity metrics and community composition ordinations
# Precipitation: Annual precipitation (30-year average)
# Flood disturbance regime: flash index
# Drought disturbance regime: Low Flow Pulse Percent
# Biogenic Pollutants: NH4+
# Osmotic stressors: Conductivity
# Canopy effects: Canopy Coverage
# Stream morphology: Rosgen index
myvariables <- which(colnames(emat) == "STAID" |
colnames(emat) == "AP" |
colnames(emat) == "flash.index" |
colnames(emat) == "LFPP" |
colnames(emat) == "NH4."|
colnames(emat) == "log.cond"|
colnames(emat) == "canopy"|
colnames(emat) == "Rosgen.Index"
)
emat_ap <- emat[,c(myvariables)]
# PCA and plots
mypr <- prcomp(emat_ap[,-1], scale = TRUE)
summary(mypr)
mypr_importance <- as.data.frame(summary(mypr)$importance)
mypr_importance$metric <- rownames(mypr_importance)
mypr_importance <- mypr_importance[,c(8,1:7)]
# diagnostic scree plot
plot(mypr, type = "l")
# PCA plot
ggbiplot(mypr, obs.scale=1, var.scale=1,
groups = emat_ap$AP,
labels = emat_ap$STAID) +
scale_colour_viridis_c(direction=-1) +
theme_classic() +
theme(text = element_text(size = 16)) +
theme(axis.text = element_text(size = 16))
# generating tables
m_env <- cbind(emat_ap[,-1], mypr$x[,1:2])
# correlations with PCA1
Pcor <- as.data.frame(cor(m_env[,1:7],m_env[,8:9]))
Pcor$variable <- rownames(Pcor)
Pcor <- Pcor[,c(3,1,2)]
Pcor
